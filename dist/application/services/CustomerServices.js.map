{"version":3,"sources":["C:\\Users\\Smile\\Desktop\\oi\\src\\application\\services\\CustomerServices.ts"],"sourcesContent":["import { randomUUID } from \"crypto\";\r\nimport { CustomerRepository } from \"../../infra/repositories/CustomerRepository\";\r\nimport bcrypt from \"bcrypt\"\r\n\r\nexport class GetCustomers { \r\n  constructor(private customerRepository: CustomerRepository) { }\r\n\r\n  async execute() {\r\n    return this.customerRepository.findAll()\r\n  }\r\n}\r\n\r\nexport class GetCustomerById {\r\n  constructor(private customerRepository: CustomerRepository) {}\r\n\r\n  async execute(id:string) {\r\n    return this.customerRepository.findById(id)\r\n  }\r\n}\r\n\r\nexport class GetCustomerByEmail {\r\n  constructor(private customerRepository: CustomerRepository) {}\r\n\r\n  async execute(email:string) {\r\n    return this.customerRepository.findByEmail(email)\r\n  }\r\n}\r\n\r\nexport class RemoveById {\r\n  constructor(private customerRepository: CustomerRepository) {}\r\n\r\n  async execute(data) {\r\n    const { id } = data\r\n\r\n    await this.customerRepository.removeById(id)\r\n  }\r\n}\r\n\r\nexport class RegisterCustomer {\r\n  constructor(private customerRepository: CustomerRepository) {}\r\n  async execute(data) {\r\n    const { name, email, password } = data\r\n    \r\n    const existingCustomer = await this.customerRepository.findByEmail(email)\r\n    if (existingCustomer) {\r\n      throw new Error(\"Customer already exists\")\r\n    }\r\n\r\n    const hashedPassword = await bcrypt.hash(password, 10)\r\n\r\n    const customer = await this.customerRepository.save({id: randomUUID(), name, email, password: hashedPassword, createdAt : new Date(), updatedAt: new Date() })\r\n\r\n    return customer\r\n  }\r\n}"],"names":["randomUUID","bcrypt","GetCustomers","constructor","customerRepository","execute","findAll","GetCustomerById","id","findById","GetCustomerByEmail","email","findByEmail","RemoveById","data","removeById","RegisterCustomer","name","password","existingCustomer","Error","hashedPassword","hash","customer","save","createdAt","Date","updatedAt"],"mappings":"AAAA,SAASA,UAAU,QAAQ,SAAS;AAEpC,OAAOC,YAAY,SAAQ;AAE3B,OAAO,MAAMC;;IACXC,YAAY,AAAQC,kBAAsC,CAAE;aAAxCA,qBAAAA;IAA0C;IAE9D,MAAMC,UAAU;QACd,OAAO,IAAI,CAACD,kBAAkB,CAACE,OAAO;IACxC;AACF;AAEA,OAAO,MAAMC;;IACXJ,YAAY,AAAQC,kBAAsC,CAAE;aAAxCA,qBAAAA;IAAyC;IAE7D,MAAMC,QAAQG,EAAS,EAAE;QACvB,OAAO,IAAI,CAACJ,kBAAkB,CAACK,QAAQ,CAACD;IAC1C;AACF;AAEA,OAAO,MAAME;;IACXP,YAAY,AAAQC,kBAAsC,CAAE;aAAxCA,qBAAAA;IAAyC;IAE7D,MAAMC,QAAQM,KAAY,EAAE;QAC1B,OAAO,IAAI,CAACP,kBAAkB,CAACQ,WAAW,CAACD;IAC7C;AACF;AAEA,OAAO,MAAME;;IACXV,YAAY,AAAQC,kBAAsC,CAAE;aAAxCA,qBAAAA;IAAyC;IAE7D,MAAMC,QAAQS,IAAI,EAAE;QAClB,MAAM,EAAEN,EAAE,EAAE,GAAGM;QAEf,MAAM,IAAI,CAACV,kBAAkB,CAACW,UAAU,CAACP;IAC3C;AACF;AAEA,OAAO,MAAMQ;;IACXb,YAAY,AAAQC,kBAAsC,CAAE;aAAxCA,qBAAAA;IAAyC;IAC7D,MAAMC,QAAQS,IAAI,EAAE;QAClB,MAAM,EAAEG,IAAI,EAAEN,KAAK,EAAEO,QAAQ,EAAE,GAAGJ;QAElC,MAAMK,mBAAmB,MAAM,IAAI,CAACf,kBAAkB,CAACQ,WAAW,CAACD;QACnE,IAAIQ,kBAAkB;YACpB,MAAM,IAAIC,MAAM;QAClB;QAEA,MAAMC,iBAAiB,MAAMpB,OAAOqB,IAAI,CAACJ,UAAU;QAEnD,MAAMK,WAAW,MAAM,IAAI,CAACnB,kBAAkB,CAACoB,IAAI,CAAC;YAAChB,IAAIR;YAAciB;YAAMN;YAAOO,UAAUG;YAAgBI,WAAY,IAAIC;YAAQC,WAAW,IAAID;QAAO;QAE5J,OAAOH;IACT;AACF"}